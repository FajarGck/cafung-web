get store with product

app.get('/stores/:id/products', (req, res) => {
    const storeId = req.params.id;
    const query = `
        SELECT stores.id AS store_id, stores.name AS store_name, stores.owner, stores.image_path AS store_image,
               products.id AS product_id, products.name AS product_name, products.description, products.price, products.image_path AS product_image,
               categories.id AS category_id, categories.name AS category_name
        FROM stores
        LEFT JOIN products ON stores.id = products.store_id
        LEFT JOIN categories ON products.category_id = categories.id
        WHERE stores.id = ?
    `;

    db.query(query, [storeId], (err, results) => {
        if (err) {
            return res.status(500).json({
                status: 'error',
                message: 'Internal server error',
                error: err
            });
        }

        if (results.length === 0) {
            return res.status(404).json({
                status: 'error',
                message: 'Store not found'
            });
        }

        const store = {
            id: results[0].store_id,
            name: results[0].store_name,
            owner: results[0].owner,
            image_path: results[0].store_image,
            products: results.map(row => ({
                id: row.product_id,
                name: row.product_name,
                description: row.description,
                price: row.price,
                image_path: row.product_image,
                category: {
                    id: row.category_id,
                    name: row.category_name
                }
            }))
        };

        res.status(200).json({
            status: 'success',
            data: store
        });
    });
});



get all products

app.get('/products', (req, res) => {
    const query = `
        SELECT products.id AS product_id, products.name AS product_name, products.description, products.price, products.image_path AS product_image,
               categories.id AS category_id, categories.name AS category_name,
               stores.id AS store_id, stores.name AS store_name, stores.location, stores.image_path AS store_image
        FROM products
        LEFT JOIN categories ON products.category_id = categories.id
        LEFT JOIN stores ON products.store_id = stores.id
    `;

    db.query(query, (err, results) => {
        if (err) {
            return res.status(500).json({
                status: 'error',
                message: 'Internal server error',
                error: err
            });
        }

        const products = results.map(row => ({
            id: row.product_id,
            name: row.product_name,
            description: row.description,
            price: row.price,
            image_path: row.product_image,
            category: {
                id: row.category_id,
                name: row.category_name
            },
            store: {
                id: row.store_id,
                name: row.store_name,
                location: row.location,
                image_path: row.store_image
            }
        }));

        res.status(200).json({
            status: 'success',
            data: products
        });
    });
});


app.get('/categories/:name/products', (req, res) => {
    const categoryName = req.params.name;
    const query = `
        SELECT products.id AS product_id, products.name AS product_name, products.description, products.price, products.image_path AS product_image,
               categories.id AS category_id, categories.name AS category_name,
               stores.id AS store_id, stores.name AS store_name, stores.location, stores.image_path AS store_image
        FROM products
        LEFT JOIN categories ON products.category_id = categories.id
        LEFT JOIN stores ON products.store_id = stores.id
        WHERE categories.name = ?
    `;

    db.query(query, [categoryName], (err, results) => {
        if (err) {
            return res.status(500).json({
                status: 'error',
                message: 'Internal server error',
                error: err
            });
        }

        if (results.length === 0) {
            return res.status(404).json({
                status: 'error',
                message: 'No products found for this category'
            });
        }

        const products = results.map(row => ({
            id: row.product_id,
            name: row.product_name,
            description: row.description,
            price: row.price,
            image_path: row.product_image,
            category: {
                id: row.category_id,
                name: row.category_name
            },
            store: {
                id: row.store_id,
                name: row.store_name,
                location: row.location,
                image_path: row.store_image
            }
        }));

        res.status(200).json({
            status: 'success',
            data: products
        });
    });
});